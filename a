import java.util.concurrent.Semaphore;

public class ProducerConsumer{
    static int[] buffer = new int[5];
    static Semaphore empty = new Semaphore(1);
    static Semaphore full = new Semaphore(0);
    static Semaphore mutex = new Semaphore(1);
    
    static int in = 0;
    static int out = 0;
    
    static class Producer extends Thread {
        public void run() {
            try {
                int item = (int)(Math.random() * 100);
                empty.acquire();
                mutex.acquire();
                buffer[in] = item;
                
                System.out.println("produced : " + item);
                
                in = (in + 1) % buffer.length;
                
                full.release();
                mutex.release();
            }catch(InterruptedException e){
                System.out.println("Error occcurred" + e);
            }
        }
    }
    
    static class Consumer extends Thread {
        public void run(){
            try{
                full.acquire();
                mutex.acquire();
                int item = buffer[out];
                System.out.println("Consuemed " + item);                  
                out =  ( out + 1) % buffer.length;
                empty.release();
                mutex.release();
            }catch(InterruptedException e){
                System.out.println("Error Occurred" + e);
            }
        }
    }
    
public static void main(String args[]){
    new Producer().start();
    new Consumer().start();
    }
}
